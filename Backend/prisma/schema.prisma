// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  clerkId     String?  @unique
  stats       Stats?
  mainAccount Account? @relation("UserMainAccount")
  password    String
  phoneNumber String
  country     String
  promocode   String?
  currency    String
  role        String   @default("USER")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  accounts    Account[]
  sessions    Session[]
  kycDocument KYCDocument?
  deposits    Deposit[]
  withdrawals Withdrawal[]
  kycRequests KYCRequest[]
}

model Account {
  id            String  @id @default(cuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  mainUser      User?   @relation("UserMainAccount", fields: [mainUserId], references: [id])
  mainUserId    String? @unique
  balance       Float
  leverage      String
  credit        Float
  totalDeposits Float
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KYCDocument {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  status       String   @default("pending")
  documentType String
  documentUrl  String
  submittedAt  DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Deposit {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  currency  String
  status    String
  createdAt DateTime @default(now())
}

model Withdrawal {
  id                String   @id @default(cuid())
  userId            String
  email             String
  amount            Float
  currency          String
  accountNumber     String?
  accountHolderName String
  bank              String
  iban              String?
  swiftCode         String?
  status            String   @default("PENDING")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Stats {
  id               String @id @default(cuid())
  user             User   @relation(fields: [userId], references: [id])
  userId           String @unique
  pnl              Float
  profit           Float
  loss             Float
  profitableOrders String
}

model Document {
  id        String   @id @default(cuid())
  type      String
  publicId  String
  url       String
  userId    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KYCRequest {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


